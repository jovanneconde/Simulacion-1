{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPk5NdfC9DgxTG4rgLVcPJj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jovanneconde/Simulacion-1/blob/main/inventario%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Created on Mon Jun 19 22:49:35 2023\n",
        "\n",
        "@author: John\n",
        "\"\"\"\n",
        "!pip install simpy\n",
        "import simpy\n",
        "import numpy as np\n",
        "\n",
        "def warehouse_run(env, order_cutoff ,order_target):\n",
        "  global inventory, balance, num_ordered\n",
        "\n",
        "  inventory = order_target\n",
        "  balance = 0.0\n",
        "  num_ordered = 0\n",
        "\n",
        "  while True:\n",
        "    interarrival = generate_interarrival()\n",
        "    yield env.timeout(interarrival)\n",
        "    balance -= inventory*2*interarrival\n",
        "    demand = generate_demand()\n",
        "    if demand < inventory:\n",
        "      balance += 100 * demand\n",
        "      inventory -= demand\n",
        "      print ('{:.2f} sold {}'.format(env.now, demand))\n",
        "    else:\n",
        "      balance += 100 * inventory\n",
        "      inventory = 0\n",
        "      print ('{:.2f} sold {} (out of stock)'.format(env.now, inventory))\n",
        "\n",
        "    if inventory < order_cutoff and num_ordered == 0:\n",
        "        env.process(handle_order(env, order_target))\n",
        "\n",
        "def handle_order(env, order_target):\n",
        "    global inventory, balance, num_ordered\n",
        "\n",
        "    num_ordered = order_target - inventory\n",
        "    print ('{:.2f} place order for {}'.format(env.now, num_ordered))\n",
        "    balance-= 50* num_ordered\n",
        "    yield env.timeout(2.0)\n",
        "    inventory += num_ordered\n",
        "    num_ordered= 0\n",
        "    print ('{:.2f} received order, {} in inventory '.format(env.now, inventory))\n",
        "\n",
        "\n",
        "def generate_interarrival():\n",
        "  return np.random.exponential(1./5)\n",
        "\n",
        "def generate_demand():\n",
        "  return np.random.randint(1,5)\n",
        "\n",
        "obs_time = []\n",
        "inventory_level = []\n",
        "\n",
        "def observe(env):\n",
        "    global inventory\n",
        "\n",
        "    while True :\n",
        "        obs_time.append(env.now)\n",
        "        inventory_level.append(inventory)\n",
        "        yield env.timeout(0.1)\n",
        "\n",
        "np.random.seed(2)\n",
        "\n",
        "env=simpy.Environment()\n",
        "env.process(warehouse_run(env,10,30))\n",
        "env.process(observe(env))\n",
        "\n",
        "env.run(until=5.0)\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure()\n",
        "plt.step(obs_time, inventory_level, where ='post')\n",
        "plt.xlabel('Simulation time (days)')\n",
        "plt.ylabel('Inventory level')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Fv2ZXxIHTsLd",
        "outputId": "44d1a861-f728-4bdd-e52e-e6589d5a22ff"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting simpy\n",
            "  Downloading simpy-4.0.1-py2.py3-none-any.whl (29 kB)\n",
            "Installing collected packages: simpy\n",
            "Successfully installed simpy-4.0.1\n",
            "0.11 sold 2\n",
            "0.65 sold 4\n",
            "0.77 sold 1\n",
            "0.84 sold 2\n",
            "0.89 sold 2\n",
            "0.91 sold 4\n",
            "0.98 sold 1\n",
            "1.32 sold 4\n",
            "1.35 sold 1\n",
            "1.35 place order for 21\n",
            "1.52 sold 4\n",
            "1.83 sold 3\n",
            "1.99 sold 1\n",
            "2.36 sold 0 (out of stock)\n",
            "3.06 sold 0 (out of stock)\n",
            "3.08 sold 0 (out of stock)\n",
            "3.10 sold 0 (out of stock)\n",
            "3.13 sold 0 (out of stock)\n",
            "3.29 sold 0 (out of stock)\n",
            "3.32 sold 0 (out of stock)\n",
            "3.35 received order, 21 in inventory \n",
            "3.49 sold 4\n",
            "3.62 sold 3\n",
            "3.74 sold 4\n",
            "3.87 sold 1\n",
            "3.87 place order for 21\n",
            "4.09 sold 3\n",
            "4.41 sold 2\n",
            "4.43 sold 2\n",
            "4.67 sold 0 (out of stock)\n",
            "4.82 sold 0 (out of stock)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Inventory level')"
            ]
          },
          "metadata": {},
          "execution_count": 3
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}